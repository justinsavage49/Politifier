export const badWords = {
    "nany": "ireo vat",
    "nanyyl": "nqwrpgvir yl",
    "nahf": "abha",
    "nahfrq": "ireo cnfg",
    "nff": "abha",
    "nffrf": "abha cyheny",
    "nffrq": "ireo cnfg",
    "oybj": "ireo cerfrag",
    "oybjvat": "ireo vat",
    "oybjwbo": "abha",
    "oop": "abha",
    "ooj": "abha",
    "qhzonff": "abha",
    "fghcvqnff": "abha",
    "pbpx": "abha",
    "pbpxf": "abha cyheny",
    "pbpxrq": "ireo cnfg",
    "qvpx": "abha",
    "qvpxf": "abha cyheny",
    "qvpxrq": "ireo cnfg",
    "cravf": "abha",
    "cravfrf": "abha cyheny",
    "cravfrq": "ireo cnfg",
    "wbuafba": "abha",
    "shpx": "ireo cerfrag",
    "shpxvat": "ireo vat",
    "shpxf": "ireo cyheny",
    "shpxrq": "ireo cnfg",
    "shpxre": "abha",
    "phpx": "abha",
    "phpxrq": "ireo cnfg",
    "phpxubyq": "abha",
    "phpxbyq": "abha",
    "phpxf": "abha cyheny",
    "phz": "ireo cerfrag",
    "phzzvat": "ireo vat",
    "phzf": "ireo cyheny",
    "frk": "abha cyheny",
    "gvg": "abha",
    "gvgf": "abha cyheny",
    "gvggl": "abha",
    "gvggvrf": "abha cyheny",
    "obbo": "abha",
    "obbof": "abha cyheny",
    "obbol": "abha",
    "obbovrf": "abha cyheny",
    "avccyr": "abha",
    "avccyrf": "abha cyheny",
    "nerbyn": "abha",
    "nerbynf": "abha cyheny",
    "fuvg": "abha",
    "fuvggvat": "ireo vat",
    "fuvgf": "abha cyheny",
    "chffl": "abha",
    "chffvrf": "abha cyheny",
    "phag": "abha",
    "phagf": "abha cyheny",
    "intvan": "abha",
    "intvanf": "abha cyheny",
    "intvany": "ireo vat",
    "pyvg": "abha",
    "pyvgf": "abha cyheny",
    "pyvgbevf": "abha",
    "pyvgbeny": "ireo vat",
    "znfgheongr": "ireo cerfrag",
    "znfgheongrf": "ireo cyheny",
    "znfgheongvat": "ireo vat",
    "znfgheongvba": "ireo vat",
    "pernzcvr": "abha",
    "pernzcvrq": "ireo cnfg",
    "pernzcvrf": "abha cyheny",
    "wnpxvat": "ireo vat",
    "betnfz": "abha",
    "betnfzf": "abha cyheny",
    "fhpx": "ireo cerfrag",
    "fhpxrq": "ireo cnfg",
    "purngvat": "ireo vat"
};

const verb_ing = [
    "Exploring",
    "Dancing",
    "Creating",
    "Smiling",
    "Laughing",
    "Connecting",
    "Reflecting",
    "Appreciating",
    "Listening",
    "Breathing",
    "Dreaming",
    "Celebrating",
    "Growing",
    "Imagining",
    "Cherishing",
    "Nurturing",
    "Thriving",
    "Savoring",
    "Giving",
    "Loving"
];

const adjective_ly = [
    "Happily",
    "Joyfully",
    "Blissfully",
    "Cheerfully",
    "Eagerly",
    "Enthusiastically",
    "Lovingly",
    "Optimistically",
    "Radiantly",
    "Delightfully",
    "Gratefully",
    "Playfully",
    "Tenderly",
    "Lively",
    "Heartily"
];

const verb_past = [
    "achieved",
    "celebrated",
    "completed",
    "succeeded",
    "accomplished",
    "fulfilled",
    "realized",
    "won",
    "triumphed",
    "excelled",
    "shined",
    "glowed",
    "radiated",
    "sparkled",
    "thrived",
    "blossomed",
    "progressed",
    "developed",
    "improved",
    "grew",
    "learned",
    "experienced",
    "embraced",
    "enjoyed",
    "loved",
    "cherished",
    "helped",
    "assisted",
    "supported",
    "collaborated",
    "cooperated",
    "contributed",
    "inspired",
    "motivated",
    "encouraged",
    "empowered",
    "uplifted",
    "energized",
    "invigorated",
    "revitalized",
    "rejuvenated",
    "nurtured",
    "fostered",
    "cultivated",
    "promoted",
    "advanced",
    "mentored",
    "guided",
    "coached",
    "influenced",
    "impacted",
    "upgraded",
    "elevated",
    "elevated",
    "boosted",
    "lifted",
    "enhanced",
    "polished",
    "refined",
    "enriched",
    "expanded",
    "broadened",
    "deepened",
    "diversified",
    "matured",
    "ripened",
    "bloomed",
    "flourished"
];

const verb_present = [
    "support",
    "encourage",
    "inspire",
    "motivate",
    "empower",
    "celebrate",
    "appreciate",
    "cherish",
    "treasure",
    "admire",
    "respect",
    "love",
    "care",
    "nurture",
    "embrace",
    "welcome",
    "include",
    "accept",
    "tolerate",
    "assist",
    "help",
    "contribute",
    "collaborate",
    "cooperate",
    "uplift",
    "energize",
    "invigorate",
    "revitalize",
    "rejuvenate",
    "foster",
    "cultivate",
    "promote",
    "advance",
    "develop",
    "grow",
    "progress",
    "thrive",
    "blossom",
    "excel",
    "shine",
    "glow",
    "radiate",
    "sparkle",
    "beacon",
    "delight",
    "enjoy",
    "savor",
    "relish",
    "value",
    "revere",
    "venerate",
    "esteem",
    "praise",
    "commend",
    "applaud",
    "acclaim",
    "honor",
    "exalt",
    "glorify",
    "adore",
    "idolize",
    "fancy",
    "embellish",
    "enhance",
    "decorate",
    "adorn",
    "brighten",
    "strengthen",
    "fortify",
    "bolster",
    "uphold",
    "maintain",
    "sustain",
    "progress",
    "evolve",
    "expand",
    "succeed",
    "prosper",
    "achieve",
    "accomplish",
    "attain",
    "fulfill",
    "realize",
    "reach",
    "gain",
    "win",
    "victory",
    "triumph",
    "prevail",
    "overcome",
    "conquer",
    "master",
    "dominate",
    "lead",
    "guide"
];

const verb_plural = [
    "supports",
    "encourages",
    "inspires",
    "motivates",
    "empowers",
    "celebrates",
    "appreciates",
    "cherishes",
    "treasures",
    "admires",
    "respects",
    "loves",
    "nurtures",
    "welcomes",
    "includes",
    "accepts",
    "tolerates",
    "assists",
    "helps",
    "uplifts",
    "energizes",
    "invigorates",
    "revitalizes",
    "rejuvenates",
    "cultivates",
    "thrives",
    "blossoms",
    "excels",
    "shines",
    "glows",
    "radiates",
    "sparkles",
    "savors",
    "relishes",
    "values",
    "reveres",
    "worships",
    "venerates",
    "esteems",
    "praises",
    "commends",
    "applauds",
    "acclaims",
    "honors",
    "adores",
    "idolizes",
    "embellishs",
    "enhances",
    "decorates",
    "adorns",
    "brightens",
    "strengthens",
    "fortifies",
    "bolsters",
    "maintains",
    "progresses",
    "evolves",
    "expands",
    "succeeds",
    "prospers",
    "achieves",
    "accomplishs",
    "attains",
    "fulfills",
    "realizes",
    "reachs",
    "gains",
    "wins",
    "triumphs",
    "prevails",
    "overcomes",
    "conquers",
    "masters",
    "dominates",
    "leads",
    "guides"
];

const noun = [
    "champion",
    "hero",
    "warrior",
    "athlete",
    "player",
    "competitor",
    "performer",
    "participant",
    "advocate",
    "supporter",
    "ally",
    "friend",
    "teammate",
    "partner",
    "collaborator",
    "challenger",
    "defender",
    "guardian",
    "protector",
    "peacekeeper",
    "peacemaker",
    "ambassador",
    "envoy",
    "diplomat",
    "negotiator",
    "mediator",
    "conciliator",
    "harmonizer",
    "unifier",
    "connector",
    "bridge-builder",
    "helper",
    "assistant",
    "companion",
    "guide",
    "mentor",
    "coach",
    "leader",
    "trailblazer",
    "pioneer",
    "innovator",
    "visionary",
    "change-maker",
    "inspirer",
    "motivator",
    "influencer",
    "agent",
    "messenger",
    "speaker",
    "communicator",
    "advancer",
    "promoter",
    "propagator",
    "enthusiast",
    "backer",
    "fan",
    "believer",
    "devotee",
    "aficionado",
    "admirer",
    "appreciator",
    "lover",
    "entertainer",
    "artist",
    "creative",
    "artisan",
    "craftsperson",
    "maker",
    "creator",
    "designer",
    "inventor",
    "imaginator",
    "dreamer",
    "explorer",
    "adventurer",
    "traveller",
    "wanderer",
    "nomad",
    "sojourner",
    "discoverer",
    "seeker",
    "learner",
    "student",
    "scholar",
    "intellectual",
    "thinker",
    "philosopher",
    "sage",
    "wise person",
    "teacher",
    "educator",
    "instructor",
    "advisor",
    "counselor",
    "facilitator",
    "role model",
    "exemplar",
    "paragon",
    "inspiration",
    "model",
    "icon",
    "idol",
    "example",
    "influence",
    "guiding light",
    "beacon",
    "star",
    "celebrity",
    "celebrated person",
    "notable",
    "distinguished person",
    "remarkable person",
    "standard-bearer",
    "torchbearer",
    "epitome",
    "embodiment",
    "personification",
    "incarnation",
    "representation",
    "symbol",
    "avatar",
    "manifestation",
    "expression",
    "reflection",
    "image",
    "character",
    "figure",
    "individual",
    "human being",
    "mortal",
    "creature",
    "soul",
    "being",
    "personage",
    "fellow",
    "colleague",
    "associate",
    "peer",
    "compatriot",
    "mate",
    "confidant",
    "chum",
    "buddy",
    "pal",
    "amigo",
    "homie",
    "sidekick",
    "bosom buddy",
    "best friend",
    "soulmate",
    "kindred spirit",
    "close friend",
    "intimate friend",
    "confidante",
    "friend in need",
    "true friend",
    "faithful friend",
    "loyal friend",
    "trusted friend",
    "beloved friend",
    "dear friend",
    "cherished friend",
    "special friend",
    "precious friend",
    "treasured friend",
    "good friend",
    "close companion",
    "bosom friend",
    "inseparable friend",
    "supportive friend",
];

const noun_plural = [
    "Friends",
    "Dreams",
    "Joys",
    "Smiles",
    "Laughters",
    "Hugs",
    "Blessings",
    "Opportunities",
    "Achievements",
    "Victories",
    "Treasures",
    "Memories",
    "Experiences",
    "Delights",
    "Miracles",
    "Adventures",
    "Wonders",
    "Possibilities",
    "Moments",
    "Hearts",
    "Gratitude",
    "Kindnesses",
    "Energies",
    "Solutions",
    "Harmonies",
    "Successes",
    "Prospects",
    "Goodwill",
    "Courages",
    "Wisdoms",
    "Legacies",
    "Fortunes",
    "Affirmations",
    "Talents",
    "Abundances",
    "Generosities",
    "Fulfillments",
    "Empowerments",
    "Resiliences"
];

const speechMap = {
    "verb past": verb_past,
    "verb present": verb_present,
    "verb ing": verb_ing,
    "verb plural": verb_plural,
    "noun": noun,
    "noun plural": noun_plural,
    "adjective ly": adjective_ly
};

function getRandomInt(max)
{
    return Math.floor(Math.random() * max);
}

export function swapWord(speechPart)
{
    try
    {
        const wordBank = speechMap[speechPart];

        return wordBank[getRandomInt(wordBank.length)];
    }
    catch(error)
    {
        console.error(`${speechPart}: ${error}`);

        return "error";
    }
}


